# Generated by Django 4.0.4 on 2022-06-22 08:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import openuser.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(editable=False, help_text='User database ID', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('uid', models.CharField(default=openuser.models.get_random_int, help_text='User Unique ID', max_length=15, unique=True, verbose_name='UID')),
                ('cid', models.CharField(blank=True, help_text='The creators ID', max_length=15, null=True, verbose_name='CID')),
                ('app_name', models.CharField(blank=True, help_text='The name of this Openuser data. Spaces are replaced with underscores', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Must begin and end with a letter. And can only contain letters, numbers and hyphens', regex='^[a-zA-Z]([\\w -]*[a-zA-Z])?$'), django.core.validators.MinLengthValidator(limit_value=4)], verbose_name='App Name')),
                ('username', models.CharField(error_messages={'unique': 'This username is not available'}, max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(limit_value=4), django.core.validators.RegexValidator(inverse_match=True, message='Username can only contain letters, numbers and underscore', regex='\\W')], verbose_name='Username')),
                ('email', models.EmailField(error_messages={'unique': 'This email address belongs to another account'}, max_length=255, unique=True, verbose_name='Email Address')),
                ('password', models.CharField(help_text='User password', max_length=128, validators=[django.core.validators.MinLengthValidator(limit_value=8), django.core.validators.RegexValidator(inverse_match=True, message='Password cannot contain spaces', regex='\\s')], verbose_name='Password')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last Name')),
                ('other_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Other Name')),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female')], max_length=7, null=True, verbose_name='Gender')),
                ('mugshot', models.URLField(blank=True, help_text='Users mugshot url', max_length=255, null=True, verbose_name='Mugshot')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('about', models.TextField(blank=True, help_text='About me', null=True, verbose_name='About')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='OpenuserCreator',
            fields=[
                ('id', models.BigAutoField(editable=False, help_text='Creators ID', primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('cid', models.CharField(blank=True, help_text='The creators ID', max_length=15, null=True, verbose_name='CID')),
            ],
            options={
                'verbose_name_plural': 'Openuserceators',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country')),
                ('country_code', models.CharField(blank=True, max_length=5, null=True, verbose_name='Country Code')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State')),
                ('state_abbr', models.CharField(blank=True, max_length=5, null=True, verbose_name='State Abbreviation')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='City')),
                ('postal', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postal/ZIP')),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Street')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name_plural': 'Addresses',
                'ordering': ['country'],
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('username__length__gte', 4)), name='min_username_length'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('cid', 'app_name'), name='unique_app_name'),
        ),
    ]
